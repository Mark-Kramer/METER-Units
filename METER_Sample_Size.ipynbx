{
 "cells": [
  {
   "cell_type": "markdown",
   "id": "183f8782-7b20-4c50-9b24-330b84c51dee",
   "metadata": {},
   "source": [
    "# Sample Size - How much data is enough for your experiment?"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "9b976912-2b5d-4ae1-be2a-2f1f40cb1d3e",
   "metadata": {},
   "source": [
    "<div class=\"alert alert-block alert-danger\">\n",
    "<b>Alert:</b> If you're running this on <b>Google Colab</b>, then uncomment and run the next two cells.\n",
    "</div>"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "07d1c4fa-2969-419e-8d60-1e9075cb3076",
   "metadata": {},
   "outputs": [],
   "source": [
    "# !git clone https://github.com/Mark-Kramer/METER-Units.git"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "8658c043-55e3-4ef9-83e2-078809684b7b",
   "metadata": {},
   "outputs": [],
   "source": [
    "# import sys\n",
    "# sys.path.insert(0,'/content/METER-Units')"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "4c27513a-502c-42e2-8a0a-a079e474ba3e",
   "metadata": {},
   "source": [
    "## 0 - Setup & Introduction"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "8ae7402f-3399-4340-a306-0c557f42893d",
   "metadata": {
    "tags": []
   },
   "outputs": [],
   "source": [
    "# Load modules\n",
    "import numpy as np\n",
    "import matplotlib.pyplot as plt\n",
    "from scipy.stats import pearsonr\n",
    "import statsmodels.api as sm\n",
    "# Load custom functions\n",
    "from sample_size_functions import *"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "f512e22f-0af3-4e6e-8c7f-d5d4d68263f5",
   "metadata": {},
   "source": [
    "<div class=\"alert alert-block alert-info\">\n",
    "\n",
    "*Introduction*:\n",
    "\n",
    "- Imagine we are studying a potential new *genetic biomarker for longevity*, substance $x$. \n",
    "- Our goal is to design and perform an experiment to test the predictive power of this novel biomarker. To do so, we need to compute the **sample size** for our experiment, the number of subjects from whom to collect data, to determine whether the biomarker is useful.\n",
    "- **That's the goal of this unit:** perform a sample size calculation.\n",
    "- To start, we'll provide limited information about substance $x$ and longevity, and ask you to determine the sample size.\n",
    "- **No idea how to start a sample size calculation?** Don't worry! The goal of this unit is to teach you a general approach.\n",
    "- By the end of this unit, you'll have a deeper understanding of what sample size means, and a general, practical approach to compute it.\n",
    "</div>"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "d6ff77b0-4c41-477a-be4f-dd5de75d4ff9",
   "metadata": {},
   "source": [
    "## 1 - Just Google it?"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "8cf43eb9-a571-4a0b-aef3-be10c159c701",
   "metadata": {},
   "source": [
    "- Imagine that we have a scientific hypothesis based on previous work that suggests that substance $x$ is a genetic biomarker for longevity (i.e., age at death). \n",
    "- Before conducting an experiment to test the predictive power of this novel biomarker, we need to compute the **sample size** for our experiment.\n",
    "- So, let's do it.\n",
    "- We will see that the sample size required to generate data that can support a scientific hypothesis depends directly on the prior beliefs and knowledge about that hypothesis.\n",
    "- Imagine that we have the following limited information about substance $x$ and longevity:\n",
    "    - *People have a normal distribution of expression of substance $x$.*\n",
    "    - *Individuals at the high end of expression levels tend to live about 5 years longer than people at the low end.*"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "f39fded2-9a36-466f-8db5-696cea8b430f",
   "metadata": {},
   "source": [
    "<div class=\"alert alert-block alert-success\">\n",
    "\n",
    "**Q:** Given this information, from how many individuals do we need to collect data to have a reasonable chance of demonstrating this hypothesis is correct? (I.e., What is the **sample size**?)\n",
    "\n",
    "**A:**\n",
    "\n",
    "</div>"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "ad9dedf5-ea2d-44bf-99be-35ca9e0e6a69",
   "metadata": {},
   "source": [
    "<div class=\"alert alert-block alert-danger\">\n",
    "<b>Alert: Wait, I have no idea how to answer this?</b>\n",
    "\n",
    "</p>\n",
    "\n",
    "- Don't worry!\n",
    "- The goal of this unit is to teach you to tackle this problem.\n",
    "- Let’s first come up with any approach to compute a sample size, even if we’re not confident in the results.\n",
    "\n",
    "A few possible places to start:\n",
    "\n",
    "- *Take an educated guess*: Perhaps you have taken part in or read about similar research before. What order of magnitude seems right for this sort of experiment?\n",
    "- *Find a source*: Sample size estimation is a common topic in introductory statistics textbooks. These often include formulas that students can use to compute sample size for specific categories of questions.\n",
    "- *Google it*: : There are many web-based resources (including online calculators) that are designed to enable sample size calculations. Search engines provide a starting point for finding such resource Doing so, you might end up at a website [like this](https://researchmethodsresources.nih.gov/grt-calculator) or [like this](https://www.abs.gov.au/websitedbs/d3310114.nsf/home/sample+size+calculator).\n",
    "\n",
    "Can you estimate the sample size using any of these approaches? What obstacles did you encounter along the way. (NOTE: This isn’t always easy or obvious, even for veteran researchers!! \n",
    "\n",
    "\n",
    "</div>"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "e934f9a5-daba-4e5d-96e5-ea50c1a7a20a",
   "metadata": {},
   "source": [
    "<div class=\"alert alert-block alert-success\">\n",
    "\n",
    "**Q:** Given the description of the scientific hypothesis and experiment, think about what data you would collect and what analyses you would perform to test the hypothesis.\n",
    "\n",
    "- What types of values do you expect for each variable? What are their distributions, do you think?\n",
    "- How do you expect the variables to be related?\n",
    "- Try drawing a sketch of what you imagine a successful result might look like?\n",
    "\n",
    "**A:**\n",
    "\n",
    "</div>"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "adad8561-5a97-4175-921b-1eef24c6f18e",
   "metadata": {},
   "source": [
    "<div class=\"alert alert-block alert-success\">\n",
    "\n",
    "**Q:** We provided very little information and asked you to compute the sample size. What other information do you think would be helpful to estimate the sample size?\n",
    "\n",
    "**A:**\n",
    "\n",
    "</div>"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "3a9712a9-ae79-4450-9f59-68966a7e2fad",
   "metadata": {},
   "source": [
    "## 2- Underpowered experiments are doomed to failure."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "6c0bb810-3a0e-4927-afe6-2439f483de9e",
   "metadata": {},
   "source": [
    "Now that you've determined (or guessed) the sample size `N` for your experiment, let's perform the experiment.\n",
    "\n",
    "You collect `N` samples of data, so that you receive from each individual:\n",
    "\n",
    "* `x` - a measure of the proposed biomarker for longevity,\n",
    "\n",
    "* `lifespan` - the individual's age at death.\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "id": "99e47f6b-8302-4529-bc03-a8ffb9898eff",
   "metadata": {
    "tags": []
   },
   "outputs": [],
   "source": [
    "N = 100                               # Here, learner will input N they found in Mini 1.\n",
    "x,lifespan = load_data(N)             # Use this by default.\n",
    "# x,lifespan = load_data_Colab(N)     # Use this if on !!GOOGLE COLAB!!"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "a5a0628f-693e-43b4-ae58-32acd1b18624",
   "metadata": {},
   "source": [
    "Let's start by plotting the data."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "id": "1fbee484-9a1a-4c45-8ab0-9d8850b8ce09",
   "metadata": {
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 640x480 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.scatter(x,lifespan)\n",
    "plt.xlabel('Genetic biomarker x')\n",
    "plt.ylabel('Lifespan (years)');"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "9855a6b9-dc64-415c-855e-96209ee2bbb5",
   "metadata": {},
   "source": [
    "<div class=\"alert alert-block alert-success\">\n",
    "\n",
    "**Q:** What do you observe? Does the hypothesized relationship between the biomarker $x$ and lifespan appear present in the data?\n",
    "\n",
    "**A:**\n",
    "\n",
    "</div>"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "ab1e61e0-832d-4dd3-b169-76721af901f8",
   "metadata": {},
   "source": [
    "Let's assess the relationship between the biomarker `x` and `lifespan` beyond visual inspection.\n",
    "\n",
    "There are many ways to do so.\n",
    "\n",
    "Here, we'll fit a line to the data and compute the slope."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "id": "820dd5bd-b6d2-4d9e-bbb1-e11f8a1dcc8b",
   "metadata": {
    "tags": []
   },
   "outputs": [],
   "source": [
    "# Estimate a line from the data.\n",
    "\n",
    "from statsmodels.formula.api import ols\n",
    "\n",
    "dat                = {\"x\": x, \"lifespan\": lifespan}\n",
    "regression_results = ols(\"lifespan ~ 1 + x\", data=dat).fit()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "0c22000f-d414-4617-ba28-da3fa045353a",
   "metadata": {},
   "source": [
    "<div class=\"alert alert-block alert-success\">\n",
    "\n",
    "**Q:** If this code is new to you, don't worry. Can you see the equation for the line in the code above?\n",
    "\n",
    "**A:**\n",
    "    \n",
    "</div>"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "1f09478d-a504-4492-8189-73f8e1f56218",
   "metadata": {},
   "source": [
    "Now, with the line estimated, we can print the estimated slope and its p-value."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 28,
   "id": "0d2d9850-b0a3-40e4-ac13-1ed19ca7f0c8",
   "metadata": {
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Slope estimate = 0.9147637452625996\n",
      "p-value        = 0.3712693683575732\n"
     ]
    }
   ],
   "source": [
    "print('Slope estimate =',regression_results.params.iloc[1])\n",
    "print('p-value        =',regression_results.pvalues.iloc[1])"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "5566da0f-8cce-450c-8511-d6aa313a77e4",
   "metadata": {},
   "source": [
    "** Interpert slope, +/- 2 SD of slope."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "2909e622-5e33-46b7-960a-a179742fc1dd",
   "metadata": {},
   "source": [
    "Let's also **visualize** the estimated line by plotting it with the data."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 32,
   "id": "aa632f47-a947-43fb-835a-de8f055e2ab8",
   "metadata": {
    "jupyter": {
     "source_hidden": true
    },
    "scrolled": true,
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "image/png": "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",
      "text/plain": [
       "<Figure size 640x480 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "pred   = regression_results.get_prediction().summary_frame()\n",
    "mn     = pred['mean']\n",
    "ci_low = pred['mean_ci_lower'] \n",
    "ci_upp = pred['mean_ci_upper']\n",
    "\n",
    "# And plot it.\n",
    "indices_sorted = np.argsort(x,0)\n",
    "plt.scatter(x,lifespan)\n",
    "plt.plot(x[indices_sorted[:,0]],mn[indices_sorted[:,0]], 'r')\n",
    "plt.plot(x[indices_sorted[:,0]],ci_low[indices_sorted[:,0]], ':r')\n",
    "plt.plot(x[indices_sorted[:,0]],ci_upp[indices_sorted[:,0]], ':r')\n",
    "plt.xlabel('Genetic biomarker x')\n",
    "plt.ylabel('Lifespan (years)');"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "454310ca-3aee-4aff-9b5d-50937f094df3",
   "metadata": {},
   "source": [
    "<div class=\"alert alert-block alert-success\">\n",
    "\n",
    "**Q:** Do you find a significant relationship between the genetic biomarker `x` and `lifespan`?\n",
    "\n",
    "**A:**\n",
    "\n",
    "</div>"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "80d929d6-99ab-4e69-8fdb-6a5b011d23e1",
   "metadata": {},
   "source": [
    "<div class=\"alert alert-block alert-danger\">\n",
    "<b>Alert: Wait, this doesn't make sense!</b>\n",
    "\n",
    "</p>\n",
    "\n",
    "- We've applied a standard approach to compute sample size `N` and performed the experiment using this sample size.\n",
    "\n",
    "- We see a trend supporting the hypothesized relationship, but it's not significant.\n",
    "\n",
    "- Has the experiment failed?\n",
    "\n",
    "What's going on?\n",
    "</div>"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "6ccac4e8-fb87-4def-ba04-e6532e450a2f",
   "metadata": {},
   "source": [
    "<div class=\"alert alert-block alert-info\">\n",
    "\n",
    "*Moment of tension*:\n",
    "\n",
    "- Hook the learner - \"something isn't right and I want to know why.\"\n",
    "\n",
    "</div>"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "d0964c13-f65c-4d5d-ac56-3bdfa56e1ae0",
   "metadata": {},
   "source": [
    "## 3- What is the effect size?"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "c2f0fbb8-8057-46df-9e75-06dbc437ecec",
   "metadata": {},
   "source": [
    "In Minis 1 & 2, we determined a sample size `N`, collected data with that sample size, and tested for a relationship between longevity and biomarker $x$.\n",
    "\n",
    "Our results failed to support the hypothesis with sufficient statistical significance!\n",
    "\n",
    "Despite this failure, these data can still be useful.\n",
    "\n",
    "In this Mini, we'll see how to use these data to estimate the **effect size**."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "cdee27a8-a8e7-4e7e-b8bb-8664df42bd66",
   "metadata": {},
   "source": [
    "<div class=\"alert alert-block alert-success\">\n",
    "\n",
    "**Q:** What is the effect size for the data you analyzed in Mini 2?\n",
    "- Come up with a numerical measure that describes how meaningful the relationship between substance $x$ and lifespan is. What is the value of this measure for the data you obtained in Unit 2?\n",
    "- What does this effect size mean in words?\n",
    "- Is it consistent with your hypothesis?\n",
    "- If this effect size were correct, would it be scientifically meaningful? If so, why is the effect not statistically significant?\n",
    "\n",
    "**A:**\n",
    "\n",
    "</div>"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "d9957035-f702-4632-8e5c-24527bd412b6",
   "metadata": {},
   "source": [
    "<div class=\"alert alert-block alert-success\">\n",
    "\n",
    "**Q:** Imagine you repeated the experiment. Would you expect to see the same effect size?\n",
    "\n",
    "**A:**\n",
    "\n",
    "</div>"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "e6cf4ddc-77bb-42bc-8c41-17d1fabebbec",
   "metadata": {},
   "source": [
    "## 4- With resampling you can repeat any experiment.\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "19a18726-c789-43ff-9168-cf8829d2d904",
   "metadata": {},
   "source": [
    "- The data provided in Mini 2 represent one instantiation of the experiment.\n",
    "- Maybe we were unlucky and repeating the experiment with sample size `N` would produce significant results.\n",
    "- But, repeating the experiment is expensive.\n",
    "- An alternative is to resample your data in hand.\n",
    "\n",
    "In this Mini, we'll implement a resampling procedure (with fixed sample size `N`) and examine variability in the effect size. "
   ]
  },
  {
   "cell_type": "markdown",
   "id": "55d8d692-4e5c-4289-b604-1f6769ea5e9f",
   "metadata": {},
   "source": [
    "Our resampling procedure consists of 3 steps:\n",
    "\n",
    "1) Draw a new (random) set of labels we can use to index our data (biomarker $x$ and lifespan).\n",
    "2) Use these indices to create a resampled data set.\n",
    "3) Compute the relationship (and its statistical significance) in our resampled data (i.e., between the biomarker $x$ and lifespan).\n",
    "\n",
    "We'll now describe each step. For a related example, [see this video](https://youtu.be/mqDEJyW_z4c?si=heigY8z5PqAjnwKZ)."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "2bc056da-ec81-4893-9d07-aa69ac3698ec",
   "metadata": {},
   "source": [
    "**First**, we need to draw a set of labels we can use to index our data.\n",
    "\n",
    "To do so, we'll create a random list of indices, of size equal to the length of our data.\n",
    "\n",
    "We'll do so *with replacement*, so that the same index may be listed once, twice, or more, or not at all."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 45,
   "id": "2f83ed80-3448-4187-b74b-7f566dac587e",
   "metadata": {
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[86 35 16 75 82 84 17  4 73 11 62 53 36 39 62 27 79 23 16 29 34 28 92 69\n",
      " 96 43 40 97  1  6 88 21  0 99 28 87 31 75 96 93 58  2 43 25  0  5 12 29\n",
      " 59 68 78 35  5  1 69 95 32 58 15 29 27 71 13  4 25 32 15 17 28 76 20  3\n",
      " 25 25 69 72 63 24 25 81 64 26 13 89 36 33 43 39 15 44 38 87 14 14 90 29\n",
      " 32 37 92 83]\n"
     ]
    }
   ],
   "source": [
    "ind = np.random.choice(np.size(x), np.size(x))\n",
    "print(ind)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "4d822ceb-678f-495c-8a43-77f0d4905d03",
   "metadata": {},
   "source": [
    "<div class=\"alert alert-block alert-success\">\n",
    "\n",
    "**Q:** Look at the values in `ind`. What do they mean?\n",
    "\n",
    "**A:**\n",
    "\n",
    "</div>"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "403535ef-d037-4e42-942e-b17102f3d481",
   "metadata": {},
   "source": [
    "<div class=\"alert alert-block alert-success\">\n",
    "\n",
    "**Q:** Run the code to generate `ind` again. What do you find? (I.e., is it the same or different than the first time?)\n",
    "\n",
    "**A:**\n",
    "\n",
    "</div>"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "bd291613-73bb-42ac-8483-0c1bb077e2fa",
   "metadata": {},
   "source": [
    "**Second**, we'll used these indices to generate the resampled data"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 50,
   "id": "27c0df42-1d27-444c-a99b-9a060044e3cd",
   "metadata": {
    "tags": []
   },
   "outputs": [],
   "source": [
    "x_resampled = x[ind]\n",
    "lifespan_resampled = lifespan[ind]"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "d49311e6-9aaf-4179-9d5d-2121355d11cc",
   "metadata": {},
   "source": [
    "<div class=\"alert alert-block alert-success\">\n",
    "\n",
    "**Q:** Look at the values in `x_resampled` and `lifespan_resampled`. Do they make sense?\n",
    "\n",
    "**A:**\n",
    "\n",
    "</div>"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "c881df81-4f0c-4597-a709-a370cfae4324",
   "metadata": {},
   "source": [
    "**Third**, we determine the relationship between the resampled biomarker $x$ and the resampled lifespan.\n",
    "\n",
    "To do so, we'll fit the same linear model to our new resampled data, and again compute the slope and significance."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 56,
   "id": "d32e4b19-83ae-423b-8d28-4a564a70cde0",
   "metadata": {
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Slope estimate = 1.5794912072330187\n",
      "p-value        = 0.09853107941327825\n"
     ]
    }
   ],
   "source": [
    "dat                = {\"x\": x_resampled, \"lifespan\": lifespan_resampled}\n",
    "regression_results = ols(\"lifespan ~ 1 + x\", data=dat).fit()\n",
    "\n",
    "print('Slope estimate =',regression_results.params.iloc[1])\n",
    "print('p-value        =',regression_results.pvalues.iloc[1])"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "8814f4c9-84e1-41a4-b287-c96d064fdda5",
   "metadata": {},
   "source": [
    "<div class=\"alert alert-block alert-success\">\n",
    "\n",
    "**Q:** Repeat these steps to generate results from multiple \"experiments\". Do you ever find a significant result? How often do the p-values you find reach your desired level of statistical significance?\n",
    "\n",
    "**A:**\n",
    "\n",
    "</div>"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "0b36be1a-d4ed-443d-a883-7c8bdd24a479",
   "metadata": {},
   "source": [
    "<div class=\"alert alert-block alert-info\">\n",
    "\n",
    "*Conclusion*:\n",
    "\n",
    "- Using the sample size `N` and resampling the data we get qualitatively similar - but quantitatively different - results.\n",
    "- The effect size (i.e., slope) is consistently positive across resamples. That's consistent with our hypothesis.\n",
    "- But, we do not (or very infrequently) find a significant relationship between lifespan and $x$.\n",
    "- The significance (p-value) changes for each resample. \n",
    "\n",
    "</div>"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "be0fc241-9c23-4afe-b0c0-0e70ecd37a5f",
   "metadata": {},
   "source": [
    "## 5- You have the power!  "
   ]
  },
  {
   "cell_type": "markdown",
   "id": "298ecca4-06c9-4683-8e69-ea704ddd0c9e",
   "metadata": {},
   "source": [
    "Resampling provides a direct, computational approach to compute the **power**."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "98be7354-5771-4400-880f-b21181be8967",
   "metadata": {},
   "source": [
    "<div class=\"alert alert-block alert-danger\">\n",
    "Define power.\n",
    "    \n",
    "- It's a mysterious parameter in the online calculator.\n",
    "- What does Power = 0.8 mean?\n",
    "- What does alpha = 0.05 mean?\n",
    "</div>"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "6eb06322-0ec0-426e-83eb-9e92dba806c9",
   "metadata": {},
   "source": [
    "The procedure to compute the power using resampling is simple. Here are the steps in general:\n",
    "\n",
    "1. Resample the data.\n",
    "2. Compute the significance of the proposed effect.\n",
    "3. Repeat 1-2 many times.\n",
    "\n",
    "The power is the number of times we detect a significant effect, divided by the total number of repetitions."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "f6d0e580-1fe3-43e5-adfd-40ee1c16973f",
   "metadata": {},
   "source": [
    "Let's apply this procedure to our data and effect of interest:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 67,
   "id": "1a3146d1-1410-415c-b9cb-1db7c23caa8b",
   "metadata": {
    "tags": []
   },
   "outputs": [],
   "source": [
    "number_of_repetitions = 1000\n",
    "p_value = np.zeros(number_of_repetitions)\n",
    "for k in np.arange(number_of_repetitions):\n",
    "    ind = np.random.choice(np.size(x), np.size(x))\n",
    "    x_resampled = x[ind]\n",
    "    lifespan_resampled = lifespan[ind]\n",
    "    dat                = {\"x\": x_resampled, \"lifespan\": lifespan_resampled}\n",
    "    regression_results = ols(\"lifespan ~ 1 + x\", data=dat).fit()\n",
    "    p_value[k] = regression_results.pvalues.iloc[1]"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "78c28d4c-7143-4fe0-8c50-9eb9d0f49272",
   "metadata": {},
   "source": [
    "<div class=\"alert alert-block alert-success\">\n",
    "\n",
    "**Q:** Does the code above make sense? Can you see the data resampled, and the estimated model?\n",
    "\n",
    "**A:**\n",
    "\n",
    "</div>"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "f7c1c1fd-ccc2-4102-9dfd-2ff3472c6158",
   "metadata": {},
   "source": [
    "Now, compute the power."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 69,
   "id": "c5acb69b-3d3d-43b3-8ce0-c12e2fccef2b",
   "metadata": {
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "0.122\n"
     ]
    }
   ],
   "source": [
    "Power = np.sum(p_value < 0.05)/number_of_repetitions\n",
    "print(Power)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "7e0398d2-ead5-47ef-8c8b-5ad750444c85",
   "metadata": {},
   "source": [
    "<div class=\"alert alert-block alert-success\">\n",
    "\n",
    "**Q:** What value do you find for `Power`?\n",
    "\n",
    "- Interpert this value.\n",
    "- Do you have enough data to detect the effect?\n",
    "\n",
    "**A:**\n",
    "\n",
    "</div>"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "63b1b594-e32d-48cd-93c9-dd17a8a54d9a",
   "metadata": {},
   "source": [
    "## 5* (Optional Extension)- You have the power!"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "14c829aa-5eff-4c3c-bc89-dcbad7d81915",
   "metadata": {},
   "source": [
    "In this optional Mini, we consider an **alternative strategy to compute the power**.\n",
    "\n",
    "Instead of resampling the data, we **fit a model to the data**, then use that model to generate new data samples."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "74f2ecf9-81dd-43e1-8b4e-8084606422a1",
   "metadata": {},
   "source": [
    "\n",
    "---\n",
    "Let's begin by fitting a model to the data.\n",
    "\n",
    "We'll use a simple model: a line.\n",
    "\n",
    "We've already fit this model to estimate the effect size and its significance.\n",
    "\n",
    "We'll now fit the model, save the model parameters, then use this model to generate new data samples.\n",
    "\n",
    "Let's begin by fitting the model to our data."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 71,
   "id": "81a64bc3-e7d6-47e1-bff5-de84ec32afa0",
   "metadata": {
    "tags": []
   },
   "outputs": [],
   "source": [
    "# Fit the model (a line) to the data.\n",
    "\n",
    "from statsmodels.formula.api import ols\n",
    "dat   = {\"x\": x, \"lifespan\": lifespan}\n",
    "model = ols(\"lifespan ~ 1 + x\", data=dat).fit()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "61361434-36eb-4d4a-ab59-3f89e8199773",
   "metadata": {},
   "source": [
    "The model estimates two parameters: the `slope` and `intercept`.\n",
    "\n",
    "Let's get those two parameters:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 77,
   "id": "a149b27f-81aa-45df-a5ad-0f3fc5ce825e",
   "metadata": {
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Intercept estimate =  73.65301274906287\n",
      "Slope estimate     =  0.9147637452625996\n"
     ]
    }
   ],
   "source": [
    "intercept = model.params.iloc[0]\n",
    "slope     = model.params.iloc[1]\n",
    "print('Intercept estimate = ',intercept)\n",
    "print('Slope estimate     = ',slope)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "8ac15591-f459-4eba-a596-669305345c4f",
   "metadata": {},
   "source": [
    "We'll need one more estimate from the model fit: the dispersion."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "efbaaa8d-6d3f-4051-836f-4c982f4800e3",
   "metadata": {},
   "source": [
    "\n",
    "The **dispersion parameter** describes the amount of uncertainty in our ability to predinct each data point. In this case, it is the residual standard deviation of the lifespan after we have tried to predict it using the expression level of substance $x$."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 79,
   "id": "50278031-7b2b-40d7-9a75-5a635813c3ef",
   "metadata": {
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Dispersion parameter =  7.218034503992005\n"
     ]
    }
   ],
   "source": [
    "dispersion = np.sqrt(model.scale)\n",
    "print('Dispersion parameter = ',dispersion)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "db7f8d51-9109-4761-8470-6b2de249c3f5",
   "metadata": {},
   "source": [
    "<div class=\"alert alert-block alert-danger\">\n",
    "[Add some text interpreting these three estimated values…]\n",
    "</div>"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "f2929498-f259-4acf-aeb0-66e2e7b050b7",
   "metadata": {},
   "source": [
    "With the 3 estimated parameters, we can now simulate realizations of the model. \n",
    "\n",
    "To do so, we'll evaluate this model:\n",
    "\n",
    "`lifespan_modeled = intercept + slope * x + np.random.normal(loc=0.0, scale=dispersion, size=N)`"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "7989c36c-9474-4d3b-9335-84a81136126c",
   "metadata": {},
   "source": [
    "<div class=\"alert alert-block alert-success\">\n",
    "\n",
    "**Q:** Describe - in words - each term in the equation.\n",
    "- What variables do you recognize?\n",
    "- What variables are now?\n",
    "- What is the equation doing???\n",
    "\n",
    "**A:**\n",
    "\n",
    "</div>"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "7b390f90-1664-4a11-b9fb-ef173e16026a",
   "metadata": {},
   "source": [
    "Now, let's see what the model does.\n",
    "\n",
    "To do so, we'll evaluate the model, and compare the `lifespan_modeled` to the original `lifespan`."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 87,
   "id": "f938ff87-2289-4e2f-9dfe-aade886899e3",
   "metadata": {
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 640x480 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "lifespan_modeled = intercept + slope * x + np.random.normal(loc=0.0, scale=dispersion, size=[N,1])\n",
    "plt.scatter(x,lifespan, label='original data')\n",
    "plt.scatter(x,lifespan_modeled, label='lifespan modeled')\n",
    "plt.legend()\n",
    "plt.grid()\n",
    "plt.ylim([45, 105]);"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "c1bb3679-35a9-4347-9f16-f248054d404a",
   "metadata": {},
   "source": [
    "<div class=\"alert alert-block alert-success\">\n",
    "\n",
    "**Q:** Compare the original `lifespan` data and the `lifespan_modeled` data.\n",
    "- How do they look similar?\n",
    "- How do they look different?\n",
    "- Do the modeled data provide a \"good\" representation of the original data?\n",
    "\n",
    "**A:**\n",
    "\n",
    "</div>"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "f9c54bd9-d2ce-4a38-a01d-ddf50ec6f6c8",
   "metadata": {},
   "source": [
    "With the model estimated, we can use it to compute the power. Here are the steps in general:\n",
    "\n",
    "1. Use the model to generate `lifespan_modeled` data.\n",
    "2. Compute the significance of the proposed effect.\n",
    "3. Repeat 1-2 many times.\n",
    "\n",
    "The power is the number of times we detect a significant effect, divided by the total number of repetitions."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "d93fef8b-6d01-4605-9409-26c3e4b9f32e",
   "metadata": {},
   "source": [
    "Let's apply this procedure to our data and effect of interest:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 89,
   "id": "7e7f88d7-13b2-4601-8885-eddbf5ca8dc3",
   "metadata": {
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Power =  0.147\n"
     ]
    }
   ],
   "source": [
    "number_of_repetitions = 1000\n",
    "p_value = np.zeros(number_of_repetitions)\n",
    "for k in np.arange(number_of_repetitions):\n",
    "    lifespan_modeled = intercept + slope * x + np.random.normal(loc=0.0, scale=dispersion, size=[N,1])\n",
    "    dat                = {\"x\": x, \"lifespan\": lifespan_modeled}\n",
    "    regression_results = ols(\"lifespan ~ 1 + x\", data=dat).fit()\n",
    "    p_value[k] = regression_results.pvalues.iloc[1]\n",
    "Power = np.sum(p_value < 0.05)/number_of_repetitions\n",
    "print('Power = ',Power)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "bf0d3810-8ae2-4a92-97a9-e9e4b92f6232",
   "metadata": {},
   "source": [
    "<div class=\"alert alert-block alert-success\">\n",
    "\n",
    "**Q:** Does the code above make sense? Can you see the modeled lifespan data, and the estimated model?\n",
    "\n",
    "**A:**\n",
    "\n",
    "</div>"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "d1d169bd-14e4-4b7c-8abb-f390152b1e90",
   "metadata": {},
   "source": [
    "<div class=\"alert alert-block alert-success\">\n",
    "\n",
    "**Q:** What value do you find for `Power`?\n",
    "\n",
    "- Interpert this value.\n",
    "- Do you have enough data to detect the effect?\n",
    "- How do these results compare to the resampling approached described in Mini 5?\n",
    "\n",
    "**A:**\n",
    "\n",
    "</div>"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "5e371a04-3a3a-4060-8a69-c186c5ae1d1e",
   "metadata": {},
   "source": [
    "## 6- You have the sample size!"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "c76961b2-e88a-4f5e-b9be-c12123c379e0",
   "metadata": {},
   "source": [
    "- In Mini 5, we used resampling with a fixed sample size to compute the power.\n",
    "- We can use the same resampling approach to compute the **sample size** for a fixed power."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "bf20ce25-41f7-48ff-b98a-8d62993fb7fd",
   "metadata": {},
   "source": [
    "<div class=\"alert alert-block alert-danger\">\n",
    "Provide some intuition for this calculation.\n",
    "</div>"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "7d3a5b17-8f4d-41c8-b964-80190e17e82c",
   "metadata": {},
   "source": [
    "Let's do it!"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "1627daf9-3802-4a01-a6a8-29f6be074a75",
   "metadata": {},
   "outputs": [],
   "source": [
    "N_resampled = 1000;\n",
    "number_of_repetitions = 1000\n",
    "p_value = np.zeros(number_of_repetitions)\n",
    "for k in np.arange(number_of_repetitions):\n",
    "    ind = np.random.choice(np.size(x), N_resampled)\n",
    "    x_resampled = x[ind]\n",
    "    lifespan_resampled = lifespan[ind]\n",
    "    dat                = {\"x\": x_resampled, \"lifespan\": lifespan_resampled}\n",
    "    regression_results = ols(\"lifespan ~ 1 + x\", data=dat).fit()\n",
    "    p_value[k] = regression_results.pvalues[1]\n",
    "Power = np.sum(p_value < 0.05)/number_of_repetitions\n",
    "print('N=',N_resampled,'Power=',Power)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "ba3643a5-553f-4d6b-abae-96c2372318c7",
   "metadata": {},
   "source": [
    "<div class=\"alert alert-block alert-success\">\n",
    "\n",
    "**Q:** Compare this code to the code in Mini 5. What has changed?\n",
    "\n",
    "**A:** ... we include `N_resampled` as a new variable, and use it in the code.\n",
    "\n",
    "</div>"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "eb0b017d-c306-4bb8-9d85-a8094baf7fc7",
   "metadata": {},
   "source": [
    "<div class=\"alert alert-block alert-success\">\n",
    "\n",
    "**Q:** How does increasing the sample size `N_resampled` impact the power?\n",
    "\n",
    "**A:**\n",
    "\n",
    "</div>"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "74580d8a-d275-40c6-93ed-dbfd13c6c8e9",
   "metadata": {},
   "source": [
    "<div class=\"alert alert-block alert-success\">\n",
    "\n",
    "**Q:** At what value of `N_resampled` is the power just above 0.8?\n",
    "\n",
    "- How does this compare to the results from your online calculator?\n",
    "\n",
    "**A:**\n",
    "\n",
    "</div>"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "2b63c087-4bda-449e-8ec7-38b0c99ab679",
   "metadata": {
    "jp-MarkdownHeadingCollapsed": true
   },
   "source": [
    "## 6* (Optional Extension) - You have the sample size!"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "d51cb28e-e7de-444f-8b79-ae3674177ee6",
   "metadata": {},
   "source": [
    "In this optional Mini, we consider an **alternative strategy to compute the sample size**.\n",
    "\n",
    "Instead of resampling the data, we **fit a model to the data**, then use that model to generate new data samples."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "9f29b244-371a-468b-b5df-afe48606c21e",
   "metadata": {},
   "source": [
    "---\n",
    "If you haven't done so, please first complete *Mini 5\\* (Extensions)*.\n",
    "\n",
    "In that optional Mini, we introduce the modeling approach, and apply it to compute the power."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "ca0206a6-a420-4ec7-941b-93278a68e03a",
   "metadata": {},
   "source": [
    "---\n",
    "Let's now use this same strategy to compute the sample size.\n",
    "\n",
    "The first step is to estimate the model. We use the same code as in *Mini 5\\* (Extensions)*."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "c2573f16-3b8d-4306-b95e-5c572066ecee",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Fit the model (a line) to the data.\n",
    "from statsmodels.formula.api import ols\n",
    "dat   = {\"x\": x, \"lifespan\": lifespan}\n",
    "model = ols(\"lifespan ~ 1 + x\", data=dat).fit()\n",
    "\n",
    "intercept  = model.params[0]\n",
    "slope      = model.params[1]\n",
    "dispersion = np.sqrt(model.scale)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "3638a909-1255-4eac-af08-62c816b78606",
   "metadata": {},
   "source": [
    "We'll now use the model to generate new samples of data, given a sample size `N_modeled`.\n",
    "\n",
    "To do so, we'll re-use the code from Mini 6, with some small changes."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "21a6a095-9482-4e66-8c9d-734db04e3a98",
   "metadata": {},
   "outputs": [],
   "source": [
    "N_modeled = 800;                                  # This is the a part!\n",
    "number_of_repetitions = 1000\n",
    "p_value = np.zeros(number_of_repetitions)\n",
    "for k in np.arange(number_of_repetitions):\n",
    "    ind = np.random.choice(np.size(x), N_modeled)  # There's something new here, and in the next line.\n",
    "    lifespan_modeled = intercept + slope * x[ind] + np.random.normal(loc=0.0, scale=dispersion, size=[N_modeled,1])\n",
    "    dat                = {\"x\": x[ind], \"lifespan\": lifespan_modeled}\n",
    "    regression_results = ols(\"lifespan ~ 1 + x\", data=dat).fit()\n",
    "    p_value[k] = regression_results.pvalues[1]\n",
    "Power = np.sum(p_value < 0.05)/number_of_repetitions\n",
    "print('N=',N_modeled,'Power=',Power)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "14299131-f678-447e-8634-b8fb67130e15",
   "metadata": {},
   "source": [
    "<div class=\"alert alert-block alert-danger\">\n",
    "<b>Alert:</b>\n",
    "</p>\n",
    "\n",
    "- Notice the use of `ind` and `x[ind]` in the code. Why do we need this here?\n",
    "</div>"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "c0d961f5-81bf-47ec-9beb-4ef8e929c924",
   "metadata": {},
   "source": [
    "<div class=\"alert alert-block alert-success\">\n",
    "\n",
    "**Q:** Compare this code to the code in Mini 6. What has changed?\n",
    "\n",
    "**A:** ... we include `N_modeled` as a new variable.\n",
    "\n",
    "</div>"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "7dabd5e4-18f6-46fe-90e6-2dabf86de5cf",
   "metadata": {},
   "source": [
    "<div class=\"alert alert-block alert-success\">\n",
    "\n",
    "**Q:** At what value of `N_modeled` is the power just above 0.8?\n",
    "\n",
    "- How does this compare to the results from your online calculator?\n",
    "- How does this result compare to your resampling approach in Mini 6?\n",
    "\n",
    "**A:**\n",
    "\n",
    "</div>"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "5b0d6513-ce83-4e8f-b2a5-285ae9ae5ab2",
   "metadata": {},
   "source": [
    "## 7- Well powered experiments can provide strong evidence"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "6db6374d-cf7d-4781-9b36-e1163e224b7b",
   "metadata": {},
   "source": [
    "- We've now used (at least) two approaches to calculate the sample size\n",
    "  1) online calculator\n",
    "  2) resampling\n",
    "- The result from the resampling analysis suggests a much larger sample size is required than the estimated sample size many researchers will obtain from naïve online searches.\n",
    "- Let’s now “collect new data” and see if we detect a significant effect."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "099fe13a-721f-44ac-a55a-8c068d053dc5",
   "metadata": {},
   "source": [
    "Let's begin by collecting the new data, now using the sample size you found through resampling."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "81c489a3-b950-4f63-94e1-8b087bd7427c",
   "metadata": {},
   "outputs": [],
   "source": [
    "N = 1000                     #NOTE: Learner inputs sample size, based on results in previous Minis.\n",
    "x,lifespan = load_data(N)             # Use this by default.\n",
    "# x,lifespan = load_data_Colab(N)     # Use this if on !!GOOGLE COLAB!!"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "942a8b66-3722-484f-b479-cbe115f10fa1",
   "metadata": {},
   "source": [
    "Let's plot it."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "7f315412-72c0-4e8e-9fa8-ec373f2244f9",
   "metadata": {},
   "outputs": [],
   "source": [
    "plt.scatter(x,lifespan)\n",
    "plt.xlabel('Genetic biomarker x')\n",
    "plt.ylabel('Lifespan (years)');"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "d8014187-15f0-4f8b-9169-0a1ba676051b",
   "metadata": {},
   "source": [
    "<div class=\"alert alert-block alert-success\">\n",
    "\n",
    "**Q:** Compare the plot of these new data (with `N=800`) to the plot of the original data. How are the plots similar or different?\n",
    "\n",
    "- Do you see the same trend in both plots?\n",
    "\n",
    "**A:**\n",
    "\n",
    "</div>"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "a99d171d-358b-41d3-9dab-c4b52842f08c",
   "metadata": {},
   "source": [
    "Now, let's test our hypothesis in this new data set."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "bdf5b390-752c-472b-bac7-ac5b69811260",
   "metadata": {},
   "outputs": [],
   "source": [
    "from statsmodels.formula.api import ols\n",
    "\n",
    "dat                = {\"x\": x, \"lifespan\": lifespan}\n",
    "regression_results = ols(\"lifespan ~ 1 + x\", data=dat).fit()\n",
    "print('Slope estimate =',regression_results.params[1])\n",
    "print('p-value        =',regression_results.pvalues[1])"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "e4761ace-4c77-4faa-b208-0462756fefa4",
   "metadata": {},
   "source": [
    "<div class=\"alert alert-block alert-success\">\n",
    "\n",
    "**Q:** What is the effect size and significance?\n",
    "\n",
    "- How do these results compare to the original data set?\n",
    "\n",
    "**A:**\n",
    "\n",
    "</div>"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "55240b1c-bdab-4bd1-9a6d-517c3016fccf",
   "metadata": {},
   "source": [
    "Let's also **visualize** the estimated line by plotting it with the data."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "ecfc78e3-8de5-49d9-a8fc-1cc2a2312fb2",
   "metadata": {},
   "outputs": [],
   "source": [
    "pred   = regression_results.get_prediction().summary_frame()\n",
    "mn     = pred['mean']\n",
    "ci_low = pred['mean_ci_lower'] \n",
    "ci_upp = pred['mean_ci_upper']\n",
    "\n",
    "# And plot it.\n",
    "indices_sorted = np.argsort(x,0)\n",
    "plt.scatter(x,lifespan)\n",
    "plt.plot(x[indices_sorted[:,0]],mn[indices_sorted[:,0]], 'r')\n",
    "plt.plot(x[indices_sorted[:,0]],ci_low[indices_sorted[:,0]], ':r')\n",
    "plt.plot(x[indices_sorted[:,0]],ci_upp[indices_sorted[:,0]], ':r')\n",
    "plt.xlabel('Genetic biomarker x')\n",
    "plt.ylabel('Lifespan (years)');"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "8c61310f-0dca-4663-af22-46396fe732fc",
   "metadata": {},
   "source": [
    "<div class=\"alert alert-block alert-success\">\n",
    "\n",
    "**Q:** How do these results compare to the original data set?\n",
    "\n",
    "**A:**\n",
    "\n",
    "</div>"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "37e67739-960d-4a6b-8ba4-8cf73c53ae7b",
   "metadata": {},
   "source": [
    "<div class=\"alert alert-block alert-success\">\n",
    "\n",
    "**Q:** What do you conclude about the relationship between the genetic biomarker `x` and `lifespan`?\n",
    "\n",
    "**A:**\n",
    "\n",
    "</div>"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "2c3c863e-38fe-4f1a-b200-33e92a3bdc2e",
   "metadata": {},
   "source": [
    "<div class=\"alert alert-block alert-info\">\n",
    "\n",
    "*Conclusion*:\n",
    "\n",
    "- The resampling procedure allowed us to compute a large enough sample size, so our experiment was sufficiently powered, and we detected a significant effect.\n",
    "\n",
    "\n",
    "</div>"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "6109d93d-6b05-455e-941a-401447e4bcfb",
   "metadata": {},
   "source": [
    "## 8- Summary"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "694361d5-4d5d-470c-bf3c-7076bf25c578",
   "metadata": {},
   "source": [
    "- Internet tools and statistics textbooks can provide useful formulas and calculators to estimate sample size, but uncertainty about which tools to use and how to provide correct prior knowledge about effect size can lead to underpowered experiments. In this example, many users will incorrectly arrive at a sample size of 10-100.\n",
    "- There are a number of reasons that researchers might arrive at the wrong answer in this example:\n",
    "    - It’s very easy to underestimate variability in lifespan, which leads to an underestimate of sample size.\n",
    "    - Many textbooks and online calculators focus on predictors that can only take on a small number of values. Here, substance $x$ has a range of expression levels and many users will end up using the wrong tools.\n",
    "    - The prior knowledge about the effect of substance $x$ on lifespan was originally described in terms of the difference between individuals at the lowest vs. the highest expression levels. Most data points collected for the experiment will be somewhere between these expression levels.\n",
    " \n",
    "- However, the actual required effect size is more like 500-1000\n",
    "    - This is due to the large variability in human lifespans compared to the relatively small effect size.\n",
    "- Although the effect size is meaningful scientifically, it is small compared to the measurement variability."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "e35c7c2e-0d4a-4236-94d1-21ca374e6df2",
   "metadata": {},
   "source": [
    "<div class=\"alert alert-block alert-danger\">\n",
    "<b>Warning:</b>\n",
    "</p>\n",
    "In this example, we were lucky that the initial draw of a small sample size produced the expected effect. An unlucky sample may have produced (by chance) an opposite effect. In that case, resampling will not produce meaningful power/sample size results. Preliminary data is often important for future experimental design, but it’s important to consider how variability in a small, preliminary dataset can influence power and sample size estimates.\n",
    "</div>"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "5f2274d3-4bf7-4cdb-82c5-4ff1d9647fd3",
   "metadata": {},
   "source": [
    "<div class=\"alert alert-block alert-success\">\n",
    "\n",
    "**Q:** Consider a new preliminary data set (provided). Use these data to estimate the sample size required to achieve 80% power.\n",
    "\n",
    "**A:**\n",
    "\n",
    "</div>"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.11.7"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
